# Program: options_expiry_pinning_model
# Author: Brian Anderson
# Origin Date: 01May2025
# Version: 1.1
#
# Purpose:
#    /This identifies high open interest strikes options, and looks for near-expiration
#    /price convergence, assuming that I can supply actual data at some point.
#    /Some specific subscription will probably be required to get historicals.
#    /An additional subscription will be needed to obtain live options data.
#
# Notes:
'''
The model is event-anchored (expiry Friday), not intraday pattern-based, so we do not need ultra-fine resolution.
Recommended:
Daily data is enough for signal generation.
Intraday (15–30 min) might help for execution, not model logic.
4H granularity is mostly redundant unless we are monitoring dealer hedging live intraday (which requires access I do not have).
Use daily OHLC for modeling; 5–15 min only for Friday execution.

Summary
VIX > 25 → the model degrades.
VIX > 30 → don’t use it.
VIX > 50 → you should be trading vol expansion or cash.
We do not need high-frequency data; daily data for signal, intraday only for entry.
Think of this model like a calm-weather sailboat—don't take it out during a hurricane.
'''

import pandas as pd
from datetime import datetime, timedelta

from utils.exclusion_tools import should_trade_on

# This is a conceptual scaffold; real implementation depends on your access to options OI data.
# You’ll need to plug in actual OI and price data from a provider like ORATS, OptionMetrics, or scraped via brokerage API.

# Example placeholder data structure:
# oi_data = pd.DataFrame({
#     'Date': [...],
#     'Ticker': [...],
#     'Strike': [...],
#     'Open_Interest': [...],
#     'Close_Price': [...],
# })

# --- Step 1: Identify Option Expiry Dates ---
def get_third_fridays(start, end):
    fridays = pd.date_range(start=start, end=end, freq='W-FRI')
    return [d for d in fridays if 15 <= d.day <= 21]

# --- Step 2: Find Top OI Strikes Near Expiry ---
def identify_pinning_targets(oi_data, expiry_window):
    signals = []

    for expiry_date in expiry_window:
        signal_date = expiry_date - timedelta(days=2)
        if not should_trade_on(signal_date):
            print(f"[SKIP] Signal blocked on {signal_date.date()} due to exclusion.")
            continue

        week_data = oi_data[oi_data['Date'] == signal_date]  # <- this was accidentally overwritten
        if week_data.empty:
            continue

        grouped = week_data.groupby('Strike')['Open_Interest'].sum().reset_index()
        top_strike = grouped.sort_values('Open_Interest', ascending=False).iloc[0]['Strike']

        candidates = week_data[abs(week_data['Close_Price'] - top_strike) / top_strike <= 0.02]  # within 2%

        for _, row in candidates.iterrows():  # loops over each row in the earnings_df DataFrame (Pandas)
            signals.append({
                'Date': expiry_date,
                'Ticker': row['Ticker'],
                'Close_Price': row['Close_Price'],
                'Pin_Strike': top_strike,
                'Deviation': abs(row['Close_Price'] - top_strike) / top_strike
            })
    return pd.DataFrame(signals)

# --- Example Usage ---
# oi_data = pd.read_csv('sample_oi_dataset.csv')
# expiry_dates = get_third_fridays('2022-01-01', '2024-01-01')
# signals = identify_pinning_targets(oi_data, expiry_dates)
# print(signals.head())

# --- TODO List ---
#
# 1. ...
# 2. Incorporate audit and compliance imports and controls.
