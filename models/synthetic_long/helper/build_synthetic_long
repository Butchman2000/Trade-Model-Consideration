# Program: build_synthetic_long
# Author: Brian Anderson
# Origin Date: 03May2025
# Version: 1.3
#
# Purpose
#    /Construct a synthetic long using call/put pair with slippage modeled

from config.constraints import CONSTRAINT_SLIPPAGE

'''
# Example constraint dictionary (could be imported from a shared config module)
# CONSTRAINT_SLIPPAGE = {
#     'slippage_per_leg': 0.10  # Simulated execution slippage in dollars per contract leg
# }
'''

def build_synthetic_long(price_data, options_data):
    """
    Constructs a synthetic long using the closest-to-ATM call (long) and put (short).
    Applies per-leg slippage to simulate realistic execution costs.

    Args:
        price_data (dict): Contains 'spot' key with current stock price
        options_data (list of dict): Option quotes with 'type', 'strike', 'bid', 'ask'

    Returns:
        dict: Synthetic structure with strike/premium for each leg, and net debit
    """
    spot = price_data['spot']

    '''
    # Colleague had suggested lambda usage for code condensation, I do not prefer yet.
    
    call = min(
        (o for o in options_data if o['type'] == 'call'),
        key=lambda x: abs(x['strike'] - spot)
    )
    put = min(
        (o for o in options_data if o['type'] == 'put'),
        key=lambda x: abs(x['strike'] - spot)
    )
    '''
  
    # Find closest-to-ATM call
    atm_call_candidates = [option for option in options_data if option['type'] == 'call']
    closest_call = None
    smallest_call_diff = float('inf')
    for option in atm_call_candidates:
        diff = abs(option['strike'] - spot)
        if diff < smallest_call_diff:
            smallest_call_diff = diff
            closest_call = option

    # Find closest-to-ATM put
    atm_put_candidates = [option for option in options_data if option['type'] == 'put']
    closest_put = None
    smallest_put_diff = float('inf')
    for option in atm_put_candidates:
        diff = abs(option['strike'] - spot)
        if diff < smallest_put_diff:
            smallest_put_diff = diff
            closest_put = option

    # Simulate slippage on both legs
    slippage = CONSTRAINT_SLIPPAGE['slippage_per_leg']

    effective_call_price = closest_call['ask'] + slippage  # buying the call, worse price
    effective_put_price = closest_put['bid'] - slippage    # selling the put, worse price

    if (spot - closest_call["strike"] >5 ) or (spot - closest_call["strike"] > 5):
        pnl_edge = round((spot - closest_call["strike"]) - (effective_call_price - effective_put_price), 2)
    else:
        pnl_edge = round((closest_call["strike"] - closest_put["strike"]) - (effective_call_price - effective_put_price), 2)

    strike_delta_between_legs = abs(closest_call["strike"] - closest_put["strike"])

    return {
        "call": {
            "strike": closest_call["strike"],
            "premium": round(effective_call_price, 2)
        },
        "put": {
            "strike": closest_put["strike"],
            "premium": round(effective_put_price, 2)
        },
        "net_debit": round(effective_call_price - effective_put_price, 2),
        "pnl_edge": pnl_edge,
        "strike_delta_between_legs": strike_delta_between_legs

    }
